<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | Academic</title>
    <link>/categories/r/</link>
      <atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 28 Dec 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>R</title>
      <link>/categories/r/</link>
    </image>
    
    <item>
      <title>Hilbert Curves</title>
      <link>/post/hilbert/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/post/hilbert/</guid>
      <description>


&lt;div id=&#34;d-hilbert-curves&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2D Hilbert Curves&lt;/h2&gt;
&lt;p&gt;Start by “borrow” some code to create 2D Hilbert Curves:&lt;/p&gt;
&lt;p&gt;From &lt;a href=&#34;https://aschinchon.wordpress.com/2016/02/01/going-bananas-with-hilbert/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hilbert.2d.1 = function(n=3) {
  m=matrix(1);
  r=2
  for (i in 1:n)
  {
    tmp=cbind(t(m), m+nrow(m)^2)
    m=rbind(tmp, (2*nrow(m))^r-tmp[nrow(m):1,]+1)
  }
  return(melt(m) %&amp;gt;% plyr::rename(c(&amp;quot;Var1&amp;quot; = &amp;quot;x&amp;quot;, &amp;quot;Var2&amp;quot; = &amp;quot;y&amp;quot;, &amp;quot;value&amp;quot;=&amp;quot;order&amp;quot;)) %&amp;gt;% arrange(order))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From &lt;a href=&#34;http://www.fundza.com/algorithmic/space_filling/hilbert/basics/index.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hilbert.2d.2 &amp;lt;- function(n=3){
  H.aux &amp;lt;-   function(x=0, y=0, xi=1, xj=0, yi=0, yj=1, n=n) {
    
    if (n &amp;lt;= 0) {
      return(c(x + (xi + yi)/2, y + (xj + yj)/2))
    } else {
      return(rbind(
        H.aux(x,           y,           yi/2, yj/2,  xi/2,  xj/2, n-1),
        H.aux(x+xi/2,      y+xj/2 ,     xi/2, xj/2,  yi/2,  yj/2, n-1),
        H.aux(x+xi/2+yi/2, y+xj/2+yj/2, xi/2, xj/2,  yi/2,  yj/2, n-1),
        H.aux(x+xi/2+yi,   y+xj/2+yj,  -yi/2,-yj/2, -xi/2, -xj/2, n-1)
      ))
    }    
  }
  return(setNames(as.data.frame(H.aux(n=n)),  c(&amp;#39;x&amp;#39;,&amp;#39;y&amp;#39;)) )
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And… from &lt;a href=&#34;http://www.mathworks.com/matlabcentral/fileexchange/27577-fractal-curves/content/hilbert.m&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hilbert.2d.3 &amp;lt;- function(n=3){
  
  a =complex(real=1, imaginary =  1);
  b =complex(real=1, imaginary = - 1);
  
  z=0
  aux=complex(real=0,imaginary=1)
  for(k in 1:n){
    w=aux*Conj(z);
    z = rbind((w-a)/2,(z-b)/2,(z+a)/2,(b-w)/2)  
  }
  return(data.frame(x=Re(z),y=Im(z)))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try to plot nicely:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reshape2)
library(gridExtra)
iter=3 #Number of iterations
df.1=hilbert.2d.1(n=iter)
df.2=hilbert.2d.2(n=iter)
df.3=hilbert.2d.3(n=iter)
customtheme &amp;lt;- theme_void()+theme(panel.border = element_rect(fill=NA))
p1 &amp;lt;- ggplot(df.1, aes(x, y)) +  geom_path(color=&amp;quot;gray75&amp;quot;, size=1) + customtheme #+ coord_fixed(ratio=1)
p2 &amp;lt;- ggplot(df.2, aes(x, y)) +  geom_path(color=&amp;quot;gray75&amp;quot;, size=1) + customtheme #+ coord_fixed(ratio=1)
p3 &amp;lt;- ggplot(df.3, aes(x, y)) +  geom_path(color=&amp;quot;gray75&amp;quot;, size=1) + customtheme #+ coord_fixed(ratio=1)

grid.arrange(p1,p2,p3,nrow = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/Hilbert/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;864&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;d-hilbert-curve&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3D Hilbert Curve&lt;/h2&gt;
&lt;p&gt;Again, borrow some code from &lt;a href=&#34;https://pastebin.com/dGMjX5Pu&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hilbert.3D&amp;lt;- function(n,...){
  H.aux.3d &amp;lt;- function(n, x=0, y=0, z=0, dx=1, dy=0, dz=0, dx2=0, dy2=1, dz2=0, dx3=0, dy3=0, dz3=1)
  {
    if(n==0)
    {
      return(c(x , y , z))
    }
    else
    {
      n=n-1
      s=2**n;
      if(dx&amp;lt;0) x=x-s*dx;
      if(dy&amp;lt;0) y=y-s*dy;
      if(dz&amp;lt;0) z=z-s*dz;
      if(dx2&amp;lt;0) x=x-s*dx2;
      if(dy2&amp;lt;0) y=y-s*dy2;
      if(dz2&amp;lt;0) z=z-s*dz2;
      if(dx3&amp;lt;0) x=x-s*dx3;
      if(dy3&amp;lt;0) y=y-s*dy3;
      if(dz3&amp;lt;0) z=z-s*dz3;
      return(rbind(
        H.aux.3d(n, x, y, z, dx2, dy2, dz2, dx3, dy3, dz3, dx, dy, dz),
        H.aux.3d(n, x+s*dx, y+s*dy, z+s*dz, dx3, dy3, dz3, dx, dy, dz, dx2, dy2, dz2),
        H.aux.3d(n, x+s*dx+s*dx2, y+s*dy+s*dy2, z+s*dz+s*dz2, dx3, dy3, dz3, dx, dy, dz, dx2, dy2, dz2),
        H.aux.3d(n, x+s*dx2, y+s*dy2, z+s*dz2, -dx, -dy, -dz, -dx2, -dy2, -dz2, dx3, dy3, dz3),
        H.aux.3d(n, x+s*dx2+s*dx3, y+s*dy2+s*dy3, z+s*dz2+s*dz3, -dx, -dy, -dz, -dx2, -dy2, -dz2, dx3, dy3, dz3),
        H.aux.3d(n, x+s*dx+s*dx2+s*dx3, y+s*dy+s*dy2+s*dy3, z+s*dz+s*dz2+s*dz3, -dx3, -dy3, -dz3, dx, dy, dz, -dx2, -dy2, -dz2),
        H.aux.3d(n, x+s*dx+s*dx3, y+s*dy+s*dy3, z+s*dz+s*dz3, -dx3, -dy3, -dz3, dx, dy, dz, -dx2, -dy2, -dz2),
        H.aux.3d(n, x+s*dx3, y+s*dy3, z+s*dz3, dx2, dy2, dz2, -dx3, -dy3, -dz3, -dx, -dy, -dz)
      ))
    }
  }
  return(setNames(as.data.frame(H.aux.3d(n=n)),  c(&amp;#39;x&amp;#39;,&amp;#39;y&amp;#39;,&amp;#39;z&amp;#39;)) )
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some Plots: with 1 and 2 iterations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(plot3D)

h.3d.1 &amp;lt;- hilbert.3D(n=1)
h.3d.2 &amp;lt;- hilbert.3D(n=2)

par(mfrow=c(1,2))
with(h.3d.1,scatter3D(x, y, z, box=F, type=&amp;#39;l&amp;#39;,lwd=10 , col=&amp;#39;black&amp;#39;))
with(h.3d.2,scatter3D(x, y, z, box=F, type=&amp;#39;l&amp;#39;,lwd=10 , col=&amp;#39;black&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/Hilbert/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fill-space-with-color&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fill space with color&lt;/h2&gt;
&lt;p&gt;I will use a &lt;span class=&#34;math inline&#34;&gt;\(64*64*64\)&lt;/span&gt; RGB cube, so… 6 iterations for the 3D as &lt;span class=&#34;math inline&#34;&gt;\(2^6=64\)&lt;/span&gt; and 9 for the 2D as &lt;span class=&#34;math inline&#34;&gt;\(2^9=512\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(512^2=64^3\)&lt;/span&gt;…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;h3d.64 &amp;lt;- setNames(hilbert.3D(6),c(&amp;#39;r&amp;#39;,&amp;#39;g&amp;#39;,&amp;#39;b&amp;#39;))
h3drgb.64 &amp;lt;- (h3d.64-min(h3d.64))/(max(h3d.64)-min(h3d.64)) #reescale to [0,1] as rgb() in R works that way.
h2d.64 &amp;lt;- hilbert.2d.3(9)
fill2d.64 &amp;lt;- cbind(h2d.64,h3drgb.64)

ggplot(fill2d.64, aes(x, y)) +  geom_tile(aes(fill=rgb(r,g,b),color=rgb(r,g,b)))+theme_void()+
  theme(legend.position=&amp;quot;none&amp;quot;)+scale_color_identity()+scale_fill_identity()+ coord_fixed(ratio=1)+theme(panel.background = element_rect(fill = &amp;quot;transparent&amp;quot;, colour = NA),
             plot.background = element_rect(fill = &amp;quot;transparent&amp;quot;, colour = NA))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/Hilbert/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
Less dimensions for the paths, &lt;span class=&#34;math inline&#34;&gt;\(16*16*16\)&lt;/span&gt;…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;h3d.16 &amp;lt;- setNames(hilbert.3D(4),c(&amp;#39;r&amp;#39;,&amp;#39;g&amp;#39;,&amp;#39;b&amp;#39;))
h3drgb.16 &amp;lt;- (h3d.16-min(h3d.16))/(max(h3d.16)-min(h3d.16))
h2d.16 &amp;lt;- hilbert.2d.3(6)
fill2d.16 &amp;lt;- cbind(h2d.16,h3drgb.16)

ggplot(fill2d.16, aes(x, y)) +  geom_path(aes(group=&amp;#39;1&amp;#39;,color=rgb(r,g,b)), size=1)+theme_void()+
  theme(legend.position=&amp;quot;none&amp;quot;)+scale_color_identity()+ coord_fixed(ratio=1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/Hilbert/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;benchmarks&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Benchmarks&lt;/h3&gt;
&lt;p&gt;And just for completition, benchmark the 3 algorithms.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(microbenchmark)

res &amp;lt;- data.frame()
for(iter in 1:7){
  aux &amp;lt;- microbenchmark(
    hilbert.2d.1(n=iter),
    hilbert.2d.2(n=iter),
    hilbert.2d.3(n=iter),
    unit=&amp;#39;ms&amp;#39;,times = 10  )
  aux &amp;lt;- data.frame(iteration=iter,algo=as.character(summary(aux)$expr),time=summary(aux)$mean)
  res &amp;lt;- rbind(res,aux)  
}

ggplot(res)+geom_line(aes(iteration,time,color=algo),size=1)+theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/Hilbert/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;75%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/post/2015-07-23-r-rmarkdown/</link>
      <pubDate>Tue, 23 Jul 2019 21:13:14 -0500</pubDate>
      <guid>/post/2015-07-23-r-rmarkdown/</guid>
      <description>


&lt;div id=&#34;r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Markdown&lt;/h1&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Including Plots&lt;/h1&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(
  c(280, 60, 20),
  c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;),
  col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;),
  init.angle = -50, border = NA
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2015-07-23-r-rmarkdown_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
